!function(t,e){t.lozad=function(){"use strict";var t=function(t){return window&&window[t]},e=["data-src"],r={rootMargin:"0px",threshold:0,load:function(t){t.getAttribute("data-src")&&(t.src=t.getAttribute("data-src"))},loaded:function(){}};function n(t){t.setAttribute("data-loaded",!0)}var o=function(t){return"true"===t.getAttribute("data-loaded")},i=function(t,e){return function(r,i){r.forEach((function(r){(r.intersectionRatio>0||r.isIntersecting)&&(i.unobserve(r.target),o(r.target)||(t(r.target),n(r.target),e(r.target)))}))}},a=function(t){return function(r){r.forEach((function(r){o(r.target)&&"attributes"===r.type&&e.indexOf(r.attributeName)>-1&&t(r.target)}))}},u=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document;return t instanceof Element?[t]:t instanceof NodeList?t:e.querySelectorAll(t)};function s(){var s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:".lozad",c=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},d=Object.assign({},r,c),f=d.root,b=d.rootMargin,l=d.threshold,v=d.load,g=d.loaded,h=void 0,O=void 0;return t("IntersectionObserver")&&(h=new IntersectionObserver(i(v,g),{root:f,rootMargin:b,threshold:l})),t("MutationObserver")&&(O=new MutationObserver(a(v,g))),{observe:function(){for(var t=u(s,f),r=0;r<t.length;r++)o(t[r])||(h?(O&&O.observe(t[r],{subtree:!0,attributes:!0,attributeFilter:e}),h.observe(t[r])):(v(t[r]),n(t[r]),g(t[r])))},observer:h,mutationObserver:O}}return s}()}(this);